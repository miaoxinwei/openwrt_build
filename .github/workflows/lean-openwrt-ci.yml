#=================================================
# https://github.com/miaoxinwei/openwrt_build
# Description: Build OpenWrt using GitHub Actions
# Lisence: AGPL-3.0
# Author: MXW
#=================================================

name: lean编译

on:
  # watch:
  #   types: [started]
  
  push:
    branches:
      - master
    paths:
      - 'lean/buildInfo.yml'
#    schedule:
#      - cron: 0 20 * * *

env:
  TZ: Asia/Shanghai
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 校验本地文件
        uses: actions/checkout@v4

      - name: 安装编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update -y
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          sudo -E timedatectl set-timezone "$TZ"

          FILE_NAME=lean-$(cat lean/buildInfo.yml | grep version | awk '{print $2}')
          echo "::set-env name=FIRMWARE::$FILE_NAME"
          
      - name: 克隆代码
        env:
          REPO_URL: https://github.com/coolsnowwolf/lede
          REPO_BRANCH: master
        run: git clone $REPO_URL -b $REPO_BRANCH openwrt

      - name: 自定义配置
        env:
          CUSTOM_SH: 'custom.sh'
        run: |
          cd openwrt
          mv ../lean/$CUSTOM_SH ./ && chmod 777 $CUSTOM_SH && ./$CUSTOM_SH

      - name: 构建程序包
        run: |
          cd openwrt
          echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages;main" > feeds.conf.default
          # echo "src-git passwall_packages https://github.com/sbwml/openwrt_helloworld.git;v5" > feeds.conf.default
          echo -e "src-git passwall https://github.com/xiaorouji/openwrt-passwall.git;main" >> feeds.conf.default
          echo -e "src-git packages https://github.com/coolsnowwolf/packages" >> feeds.conf.default
          echo -e "src-git luci https://github.com/coolsnowwolf/luci" >> feeds.conf.default
          echo -e "src-git routing https://github.com/coolsnowwolf/routing" >> feeds.conf.default
          echo -e "src-git telephony https://github.com/openwrt/telephony.git;openwrt-23.05" >> feeds.conf.default

          sed -i 's/6.1/6.6/g' target/linux/x86/Makefile

          ./scripts/feeds clean
          ./scripts/feeds update -a
          # 更新 golang 1.22 版本
          rm -rf feeds/packages/lang/golang
          git clone https://github.com/sbwml/packages_lang_golang -b 22.x feeds/packages/lang/golang
          ./scripts/feeds install -a

      - name: config文件
        run: |
          cd openwrt
          rm -f .config*
          cp ../lean/x86_64.config .config
          make defconfig

      - name: 下载编译所需源码
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: 多线程编译
        run: |
          cd openwrt
          echo -e "$(nproc) thread build."
          make -j$(nproc) V=s

      - name: 单线程编译
        if: failure()
        run: |
          cd openwrt
          make -j1 V=s

      - name: 清理不必要的文件
        run: |
          cd openwrt
          find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}
          find ./bin/targets/ -name "*rootfs*img*" | xargs rm -rf {}
          find ./bin/targets/ -name "*efi*img*" | xargs rm -rf {}

      - name: 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FIRMWARE }}
          path: ./openwrt/bin/targets/
